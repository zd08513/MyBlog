/// <summary>/// 编 码 人：苏飞/// 联系方式：361983679  /// 更新网站：[url=http://www.sufeinet.com/thread-655-1-1.html]http://www.sufeinet.com/thread-655-1-1.html[/url]/// </summary>using System;using System.IO;using System.Web;using System.Threading; namespace Tools{    /// <summary>    /// 文件下载帮助类    /// </summary>    public class DownLoadHelper    {        #region ResponseFile 输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小        /// <summary>        ///  输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小        /// </summary>        /// <param name="_Request">Page.Request对象</param>        /// <param name="_Response">Page.Response对象</param>        /// <param name="_fileName">下载文件名</param>        /// <param name="_fullPath">带文件名下载路径</param>        /// <param name="_speed">每秒允许下载的字节数</param>        /// <returns>返回是否成功</returns>        public static bool ResponseFile(HttpRequest _Request, HttpResponse _Response, string _fileName, string _fullPath, long _speed)        {            try            {                FileStream myFile = new FileStream(_fullPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);                BinaryReader br = new BinaryReader(myFile);                try                {                    _Response.AddHeader("Accept-Ranges", "bytes");                    _Response.Buffer = false;                    long fileLength = myFile.Length;                    long startBytes = 0;                     int pack = 10240; //10K bytes                    //int sleep = 200;   //每秒5次   即5*10K bytes每秒                    int sleep = (int)Math.Floor((double)(1000 * pack / _speed)) + 1;                    if (_Request.Headers["Range"] != null)                    {                        _Response.StatusCode = 206;                        string[] range = _Request.Headers["Range"].Split(new char[] { '=', '-' });                        startBytes = Convert.ToInt64(range[1]);                    }                    _Response.AddHeader("Content-Length", (fileLength - startBytes).ToString());                    if (startBytes != 0)                    {                        _Response.AddHeader("Content-Range", string.Format(" bytes {0}-{1}/{2}", startBytes, fileLength - 1, fileLength));                    }                    _Response.AddHeader("Connection", "Keep-Alive");                    _Response.ContentType = "application/octet-stream";                    _Response.AddHeader("Content-Disposition", "attachment;filename=" + HttpUtility.UrlEncode(_fileName, System.Text.Encoding.UTF8));                     br.BaseStream.Seek(startBytes, SeekOrigin.Begin);                    int maxCount = (int)Math.Floor((double)((fileLength - startBytes) / pack)) + 1;                     for (int i = 0; i < maxCount; i++)                    {                        if (_Response.IsClientConnected)                        {                            _Response.BinaryWrite(br.ReadBytes(pack));                            Thread.Sleep(sleep);                        }                        else                        {                            i = maxCount;                        }                    }                }                catch                {                    return false;                }                finally                {                    br.Close();                    myFile.Close();                }            }            catch            {                return false;            }            return true;        }        #endregion    }}